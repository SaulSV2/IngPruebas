{"ast":null,"code":"// reducers necesitan acciones por lo que se importan\nimport * as constants from '../actions/constants'; // para las cookies, read cookie toma string de cookie para saber que cokkie se debe leer, balke cookie toma un string para dientificar la cookie a meter\n\nimport { read_cookie, bake_cookie } from 'sfcookies';\nconst BALANCE_COOKIE = 'BALANCE_COOKIE'; // por defecto pone el state en 0\n\nconst balance = (state = 0, action) => {\n  let balance; // ahora como sabra este redicer manejar diferentes actions, se puede llevar a cabo ese comportamiento con el action type\n\n  switch (action.type) {\n    case constants.SET_BALANCE:\n      balance = action.balance;\n      break;\n\n    case constants.DEPOSIT:\n      // se deposita en el nuevo estado\n      balance = state + action.deposit;\n      break;\n\n    case constants.WITHDRAW:\n      balance = state - action.withdraw;\n      break;\n\n    default:\n      balance = parseInt(read_cookie(BALANCE_COOKIE), 10) || state;\n  } // mete el balance al cookie\n\n\n  bake_cookie(BALANCE_COOKIE, balance);\n  return balance;\n};\n\nexport default balance;","map":{"version":3,"sources":["/Users/saulsv/OneDrive - IBM/Capacitacione GBS/FronEnd/React Test Driven/Proyectos/react_tdd/lootcheck/src/reducers/balance.js"],"names":["constants","read_cookie","bake_cookie","BALANCE_COOKIE","balance","state","action","type","SET_BALANCE","DEPOSIT","deposit","WITHDRAW","withdraw","parseInt"],"mappings":"AAAA;AACA,OAAO,KAAKA,SAAZ,MAA2B,sBAA3B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,WAAxC;AAEA,MAAMC,cAAc,GAAG,gBAAvB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACnC,MAAIF,OAAJ,CADmC,CAEnC;;AACA,UAAOE,MAAM,CAACC,IAAd;AACI,SAAKP,SAAS,CAACQ,WAAf;AACIJ,MAAAA,OAAO,GAAGE,MAAM,CAACF,OAAjB;AACA;;AAEJ,SAAKJ,SAAS,CAACS,OAAf;AACI;AACAL,MAAAA,OAAO,GAAGC,KAAK,GAAGC,MAAM,CAACI,OAAzB;AACA;;AAEJ,SAAKV,SAAS,CAACW,QAAf;AACIP,MAAAA,OAAO,GAAGC,KAAK,GAAGC,MAAM,CAACM,QAAzB;AACA;;AAEJ;AACIR,MAAAA,OAAO,GAAGS,QAAQ,CAACZ,WAAW,CAACE,cAAD,CAAZ,EAA8B,EAA9B,CAAR,IAA6CE,KAAvD;AAfR,GAHmC,CAoBnC;;;AAEAH,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,CAAX;AAEA,SAAOA,OAAP;AACH,CAzBD;;AA2BA,eAAeA,OAAf","sourcesContent":["// reducers necesitan acciones por lo que se importan\nimport * as constants from '../actions/constants';\n// para las cookies, read cookie toma string de cookie para saber que cokkie se debe leer, balke cookie toma un string para dientificar la cookie a meter\nimport { read_cookie, bake_cookie} from 'sfcookies';\n\nconst BALANCE_COOKIE = 'BALANCE_COOKIE';\n\n// por defecto pone el state en 0\nconst balance = (state = 0, action) => {\n    let balance;\n    // ahora como sabra este redicer manejar diferentes actions, se puede llevar a cabo ese comportamiento con el action type\n    switch(action.type) {\n        case constants.SET_BALANCE:\n            balance = action.balance;\n            break;\n\n        case constants.DEPOSIT:\n            // se deposita en el nuevo estado\n            balance = state + action.deposit;\n            break;\n\n        case constants.WITHDRAW:\n            balance = state - action.withdraw;\n            break;\n\n        default:\n            balance = parseInt(read_cookie(BALANCE_COOKIE), 10) || state;\n    }\n    // mete el balance al cookie\n\n    bake_cookie(BALANCE_COOKIE, balance);\n\n    return balance;\n}\n\nexport default balance;"]},"metadata":{},"sourceType":"module"}